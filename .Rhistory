library(tidyverse)
library(ggplot2)
library(GGally)
library(psych)
library(corrplot)
url_datos <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
datos.duros <- read.csv(url_datos)
data <- data.frame(datos.duros)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
bool.values <- data$bare.nuclei=='?'
data <- data[!bool.values,]
#Para confirmar que se eliminaron los ?
sum(data$bare.nuclei=='?')
dd <- data
#En el caso de que se quiera cambiar los 4 y 2, por M y B
dd$class <- replace(dd$class,dd$class==2,'Benigno')
dd$class <- replace(dd$class,dd$class==4,'Maligno')
#Se aplica factor
dd[["class"]] <- factor(dd[["class"]])
data[["bare.nuclei"]] <- factor(data[["bare.nuclei"]])
#Se pasa a numerico los valores de bare nuclei.
data$bare.nuclei <- as.numeric(data$bare.nuclei)
data$class <- as.numeric(data$class)
#Se elimina la columna ID
#dd$id <- NULL
data$id <- NULL
#VISTA GENERAL
ggpairs(data, aes(colour=class, alpha=0.4))
#GRAFICO DE CORRELACION
corrplot.mixed(cor(data),
lower = "number",
upper = "circle",
tl.col = "black")
data
dd
data
library(ggpubr)
library(FactorMineR)
library(factoextra)
install.packages('FactorMineR')
install.packages('factoextra')
library(ggpubr)
library(FactorMineR)
library(factoextra)
library(ggpubr)
library(FactorMineR)
install.packages('FactorMineR')
install.packages('FactoMineR')
library(FactoMineR)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
data
head(data)
url_datos <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
datos.duros <- read.csv(url_datos)
data <- data.frame(datos.duros)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
bool.values <- data$bare.nuclei=='?'
data <- data[!bool.values,]
#Para confirmar que se eliminaron los ?
sum(data$bare.nuclei=='?')
dd <- data
#En el caso de que se quiera cambiar los 4 y 2, por M y B
dd$class <- replace(dd$class,dd$class==2,'Benigno')
dd$class <- replace(dd$class,dd$class==4,'Maligno')
#Se aplica factor
dd[["class"]] <- factor(dd[["class"]])
data[["bare.nuclei"]] <- factor(data[["bare.nuclei"]])
#Se pasa a numerico los valores de bare nuclei.
data$bare.nuclei <- as.numeric(data$bare.nuclei)
data$class <- as.numeric(data$class)
dat
data
head(darta)
head(data)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
list <- [1 2 3 4 5]
list <- c(1,2,3,4,5)
list
list[,-c(0)]
PCA(data[,-c(0)],scale.unit=TRUE,ncp=5,graph=TRUE)
PCA(data[,-c(0)],scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data[,-id],scale.unit=TRUE,ncp=1,graph=TRUE)
data
head(data)
PCA(data[,-"id"],scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data[,"-id"],scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=1,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=11,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
PCA(data[,-data$id],scale.unit=TRUE,ncp=5,graph=TRUE)
?PCA
PCA(data,scale.unit=TRUE,ncp=10,graph=TRUE)
#Se elimina la columna ID
#dd$id <- NULL
data$id <- NULL
#VISTA GENERAL
ggpairs(data, aes(colour=class, alpha=0.4))
data
head(data)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
PCA(data,ncp=5,graph=TRUE)
,scale.unit=TRUE
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
PCA(data[,-c{0}],scale.unit=TRUE,ncp=5,graph=TRUE)
datos.duros <- read.csv(url_datos)
data <- data.frame(datos.duros)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
bool.values <- data$bare.nuclei=='?'
data <- data[!bool.values,]
dd <- data
data
head(data)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
datos.duros <- read.csv(url_datos)
data <- data.frame(datos.duros)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
head(data)
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
bool.values <- data$bare.nuclei=='?'
datos.duros <- read.csv(url_datos)
data <- data.frame(datos.duros)
colnames(data) <- c("id",
"clump.thickness",
"unif.cell.size",
"unif.cell.shape",
"marg.adhesion",
"epith.cell.size",
"bare.nuclei",
"bland.chroma",
"norm.nucleoli",
"mitoses",
"class")
bool.values <- data$bare.nuclei=='?'
data <- data[!bool.values,]
#Para confirmar que se eliminaron los ?
sum(data$bare.nuclei=='?')
dd <- data
#En el caso de que se quiera cambiar los 4 y 2, por M y B
dd$class <- replace(dd$class,dd$class==2,'Benigno')
dd$class <- replace(dd$class,dd$class==4,'Maligno')
#Se aplica factor
dd[["class"]] <- factor(dd[["class"]])
data[["bare.nuclei"]] <- factor(data[["bare.nuclei"]])
#Se pasa a numerico los valores de bare nuclei.
data$bare.nuclei <- as.numeric(data$bare.nuclei)
data$class <- as.numeric(data$class)
#Se elimina la columna ID
#dd$id <- NULL
data$id <- NULL
PCA(data,scale.unit=TRUE,ncp=5,graph=TRUE)
data[,-1]
head(data[,-1])
head(data[,-2])
data.sinclass = subset(data, select = -c(class) )
head(data[,-2])data.sinclass
data.sinclass
head(data.sinclass)
PCA(data.sinclass,scale.unit=TRUE,ncp=5,graph=TRUE)
dist <- dist(data.sinclass,method='euclidean')
dist
fviz_dist(dist)
fviz_dist(data.sinclass,kmeans,method="wss")
fviz_dist(data.sinclass,kmeans,method="w55")
fviz_nbclust(data.sinclass,kmeans,method="w55")
fviz_nbclust(data.sinclass,kmeans,method="wss")
#Metodo del codo
fviz_nbclust(data.sinclass,kmeans,method="siluete")
#Metodo del codo
fviz_nbclust(data.sinclass,kmeans,method="silhouette")
#Metodo del codo
fviz_nbclust(data.sinclass,kmeans,method="gap_stat")
dist = dist(data.sinclass,method='euclidean')
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal)
km.res = kmeans(data.sinclass,scaled,3,nstart=25)
km.res = kmeans(data.sinclass,3,nstart=25)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,5,nstart=25)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,2,nstart=25)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,3,nstart=25)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,15,nstart=25)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,15,nstart=3)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,15,nstart=3)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
km.res = kmeans(data.sinclass,3,nstart=3)
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
clear
cl
cs
#Metodo de daisy
dis.daisy = daisy(data.sinclass)
dis.matrix.daisy = as.matrix(dis.daisy)
?daisy
#Metodo de daisy
dis.daisy = daisy(data.sinclass)
library(cluster)
#Metodo de daisy
dis.daisy = daisy(data.sinclass)
dis.matrix.daisy = as.matrix(dis.daisy)
ks.daisy = kmeans(dis.matrix.daisy,3)
fviz_cluster(ks.daisy,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
fviz_cluster(km.res,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
fviz_cluster(ks.daisy,data=data.sinclass,palette="jco",ggtheme=theme_minimal())
ks.daisy
ks.daisy$cluster
